// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.28;

// NOTE:
// We do not deploy this contract.  This is used as an example template - the actual
// creationCode for each mimic is created on-demand
contract TaskEnvironmentMimic {
    /*
    0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa is standin for the implementation address
    0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB is standin for the owner address
    0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC is standin for the taskManager address
    0x2222222222222222222222222222222222222222222222222222222222222222 is standin for the taskData
    These values are adjusted by the factory to match the appropriate values.
    This happens during contract creation.
    */

    constructor() payable { }

    receive() external payable { }

    // no calldata or returndata
    fallback() external payable {
        assembly {
            // Verify the caller
            if iszero(eq(caller(), 0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC)) {
                mstore(0x2000, 0x27307c3) // error CallerNotOwnerOrTaskManager(); -> 0x27307c3
                revert(0x2000, 0x04) // it's a revert in a fallback so dont worry about reallocating free mem pointer
            }

            // Delegate to implementation

            // Will adjust these in the creationcode's bytecode
            mstore(0x1000, 0x2222222222222222222222222222222222222222222222222222222222220000)
            mstore(0x1020, 0x3333333333333333333333333333333333333333333333333333333333330000)
            mstore(0x1040, 0x4444444444444444444444444444444444444444444444444444444444440000)
            /*mstore(0x1060, 0x5555555555555555555555555555555555555555555555555555555555550000)
            mstore(0x1080, 0x6666666666666666666666666666666666666666666666666666666666660000)
            mstore(0x10a0, 0x7777777777777777777777777777777777777777777777777777777777770000)
            mstore(0x10c0, 0x8888888888888888888888888888888888888888888888888888888888880000)
            mstore(0x10e0, 0x9999999999999999999999999999999999999999999999999999999999990000)
            mstore(0x1100, 0x2222222222222222222222222222222222222222222222222222222222221111)
            mstore(0x1120, 0x3333333333333333333333333333333333333333333333333333333333331111)
            mstore(0x1140, 0x4444444444444444444444444444444444444444444444444444444444441111)
            mstore(0x1160, 0x5555555555555555555555555555555555555555555555555555555555551111)
            mstore(0x1180, 0x6666666666666666666666666666666666666666666666666666666666661111)
            mstore(0x11a0, 0x7777777777777777777777777777777777777777777777777777777777771111)
            mstore(0x11c0, 0x8888888888888888888888888888888888888888888888888888888888881111)
            mstore(0x11e0, 0x9999999999999999999999999999999999999999999999999999999999991111)
            mstore(0x1200, 0x2222222222222222222222222222222222222222222222222222222222222222)
            mstore(0x1220, 0x3333333333333333333333333333333333333333333333333333333333332222)
            mstore(0x1240, 0x4444444444444444444444444444444444444444444444444444444444442222)
            mstore(0x1260, 0x5555555555555555555555555555555555555555555555555555555555552222)
            mstore(0x1280, 0x6666666666666666666666666666666666666666666666666666666666662222)
            mstore(0x12a0, 0x7777777777777777777777777777777777777777777777777777777777772222)
            mstore(0x12c0, 0x8888888888888888888888888888888888888888888888888888888888882222)
            mstore(0x12e0, 0x9999999999999999999999999999999999999999999999999999999999992222)
            //*/

            let success :=
                delegatecall(
                    gas(), // gas is set by the taskmanager
                    0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa,
                    0x1000,
                    0x1111111111111111111111111111111111111111111111111111111111111111, // 0x222
                    0, // Dont need return offset
                    0 // Dont need return size
                )
        }
    }
}
